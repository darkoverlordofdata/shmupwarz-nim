##
## Entitas Generated Components for shmupwarz
##
## ** do not edit this file **
##
# import queues
import deques
import entitas
import bosco
const POOL_SIZE : int = 128

##
## Define Components
##
type
  Component* {.pure.} = enum
    Bounds
    Bullet
    ColorAnimation
    Destroy
    Enemy
    Expires
    Firing
    Health
    Layer
    Life
    Mine
    Mouse
    Player
    Position
    Resource
    ScaleAnimation
    Scale
    Score
    SoundEffect
    Velocity

  BoundsComponent* = ref object of IComponent
    radius* : float64

  BulletComponent* = ref object of IComponent
    bullet* : bool

  ColorAnimationComponent* = ref object of IComponent
    redMin* : float64
    redMax* : float64
    redSpeed* : float64
    greenMin* : float64
    greenMax* : float64
    greenSpeed* : float64
    blueMin* : float64
    blueMax* : float64
    blueSpeed* : float64
    alphaMin* : float64
    alphaMax* : float64
    alphaSpeed* : float64
    redAnimate* : bool
    greenAnimate* : bool
    blueAnimate* : bool
    alphaAnimate* : bool
    repeat* : bool

  DestroyComponent* = ref object of IComponent
    destroy* : bool

  EnemyComponent* = ref object of IComponent
    enemy* : bool

  ExpiresComponent* = ref object of IComponent
    delay* : float64

  FiringComponent* = ref object of IComponent
    firing* : bool

  HealthComponent* = ref object of IComponent
    health* : float64
    maximumHealth* : float64

  LayerComponent* = ref object of IComponent
    ordinal* : int

  LifeComponent* = ref object of IComponent
    count* : int

  MineComponent* = ref object of IComponent
    mine* : bool

  MouseComponent* = ref object of IComponent
    x* : float64
    y* : float64

  PlayerComponent* = ref object of IComponent
    player* : bool

  PositionComponent* = ref object of IComponent
    x* : float64
    y* : float64

  ResourceComponent* = ref object of IComponent
    path* : string
    sprite* : Sprite
    centered* : bool

  ScaleAnimationComponent* = ref object of IComponent
    min* : float64
    max* : float64
    speed* : float64
    repeat* : bool
    active* : bool

  ScaleComponent* = ref object of IComponent
    x* : float64
    y* : float64

  ScoreComponent* = ref object of IComponent
    value* : float64

  SoundEffectComponent* = ref object of IComponent
    effect* : int

  VelocityComponent* = ref object of IComponent
    x* : float64
    y* : float64


  ##
  ## Component Pool
  ##
  PoolObj = ref object of RootObj
    boundsComponent* : Deque[BoundsComponent]
    bulletComponent* : BulletComponent
    colorAnimationComponent* : Deque[ColorAnimationComponent]
    destroyComponent* : DestroyComponent
    enemyComponent* : EnemyComponent
    expiresComponent* : Deque[ExpiresComponent]
    firingComponent* : FiringComponent
    healthComponent* : Deque[HealthComponent]
    layerComponent* : Deque[LayerComponent]
    lifeComponent* : Deque[LifeComponent]
    mineComponent* : MineComponent
    mouseComponent* : Deque[MouseComponent]
    playerComponent* : PlayerComponent
    positionComponent* : Deque[PositionComponent]
    resourceComponent* : Deque[ResourceComponent]
    scaleAnimationComponent* : Deque[ScaleAnimationComponent]
    scaleComponent* : Deque[ScaleComponent]
    scoreComponent* : Deque[ScoreComponent]
    soundEffectComponent* : Deque[SoundEffectComponent]
    velocityComponent* : Deque[VelocityComponent]

##
## constructor for a new Component Pool
##
proc newPoolObj() : PoolObj =
  new(result)

  result.boundsComponent = initDeque[BoundsComponent]()
  for i in 1..POOL_SIZE:
    result.boundsComponent.addLast(BoundsComponent())

  result.bulletComponent = BulletComponent()

  result.colorAnimationComponent = initDeque[ColorAnimationComponent]()
  for i in 1..POOL_SIZE:
    result.colorAnimationComponent.addLast(ColorAnimationComponent())

  result.destroyComponent = DestroyComponent()

  result.enemyComponent = EnemyComponent()

  result.expiresComponent = initDeque[ExpiresComponent]()
  for i in 1..POOL_SIZE:
    result.expiresComponent.addLast(ExpiresComponent())

  result.firingComponent = FiringComponent()

  result.healthComponent = initDeque[HealthComponent]()
  for i in 1..POOL_SIZE:
    result.healthComponent.addLast(HealthComponent())

  result.layerComponent = initDeque[LayerComponent]()
  for i in 1..POOL_SIZE:
    result.layerComponent.addLast(LayerComponent())

  result.lifeComponent = initDeque[LifeComponent]()
  for i in 1..POOL_SIZE:
    result.lifeComponent.addLast(LifeComponent())

  result.mineComponent = MineComponent()

  result.mouseComponent = initDeque[MouseComponent]()
  for i in 1..POOL_SIZE:
    result.mouseComponent.addLast(MouseComponent())

  result.playerComponent = PlayerComponent()

  result.positionComponent = initDeque[PositionComponent]()
  for i in 1..POOL_SIZE:
    result.positionComponent.addLast(PositionComponent())

  result.resourceComponent = initDeque[ResourceComponent]()
  for i in 1..POOL_SIZE:
    result.resourceComponent.addLast(ResourceComponent())

  result.scaleAnimationComponent = initDeque[ScaleAnimationComponent]()
  for i in 1..POOL_SIZE:
    result.scaleAnimationComponent.addLast(ScaleAnimationComponent())

  result.scaleComponent = initDeque[ScaleComponent]()
  for i in 1..POOL_SIZE:
    result.scaleComponent.addLast(ScaleComponent())

  result.scoreComponent = initDeque[ScoreComponent]()
  for i in 1..POOL_SIZE:
    result.scoreComponent.addLast(ScoreComponent())

  result.soundEffectComponent = initDeque[SoundEffectComponent]()
  for i in 1..POOL_SIZE:
    result.soundEffectComponent.addLast(SoundEffectComponent())

  result.velocityComponent = initDeque[VelocityComponent]()
  for i in 1..POOL_SIZE:
    result.velocityComponent.addLast(VelocityComponent())

var Pool* = newPoolObj()

##
## Define a Match for each Component
##
type MatchObj = ref object of RootObj
  matchBounds : Matcher
  matchBullet : Matcher
  matchColorAnimation : Matcher
  matchDestroy : Matcher
  matchEnemy : Matcher
  matchExpires : Matcher
  matchFiring : Matcher
  matchHealth : Matcher
  matchLayer : Matcher
  matchLife : Matcher
  matchMine : Matcher
  matchMouse : Matcher
  matchPlayer : Matcher
  matchPosition : Matcher
  matchResource : Matcher
  matchScaleAnimation : Matcher
  matchScale : Matcher
  matchScore : Matcher
  matchSoundEffect : Matcher
  matchVelocity : Matcher

proc Bounds*(this : MatchObj) : Matcher =
  if this.matchBounds == nil:
    this.matchBounds = MatchAllOf(@[int(Component.Bounds)])
  return this.matchBounds

proc Bullet*(this : MatchObj) : Matcher =
  if this.matchBullet == nil:
    this.matchBullet = MatchAllOf(@[int(Component.Bullet)])
  return this.matchBullet

proc ColorAnimation*(this : MatchObj) : Matcher =
  if this.matchColorAnimation == nil:
    this.matchColorAnimation = MatchAllOf(@[int(Component.ColorAnimation)])
  return this.matchColorAnimation

proc Destroy*(this : MatchObj) : Matcher =
  if this.matchDestroy == nil:
    this.matchDestroy = MatchAllOf(@[int(Component.Destroy)])
  return this.matchDestroy

proc Enemy*(this : MatchObj) : Matcher =
  if this.matchEnemy == nil:
    this.matchEnemy = MatchAllOf(@[int(Component.Enemy)])
  return this.matchEnemy

proc Expires*(this : MatchObj) : Matcher =
  if this.matchExpires == nil:
    this.matchExpires = MatchAllOf(@[int(Component.Expires)])
  return this.matchExpires

proc Firing*(this : MatchObj) : Matcher =
  if this.matchFiring == nil:
    this.matchFiring = MatchAllOf(@[int(Component.Firing)])
  return this.matchFiring

proc Health*(this : MatchObj) : Matcher =
  if this.matchHealth == nil:
    this.matchHealth = MatchAllOf(@[int(Component.Health)])
  return this.matchHealth

proc Layer*(this : MatchObj) : Matcher =
  if this.matchLayer == nil:
    this.matchLayer = MatchAllOf(@[int(Component.Layer)])
  return this.matchLayer

proc Life*(this : MatchObj) : Matcher =
  if this.matchLife == nil:
    this.matchLife = MatchAllOf(@[int(Component.Life)])
  return this.matchLife

proc Mine*(this : MatchObj) : Matcher =
  if this.matchMine == nil:
    this.matchMine = MatchAllOf(@[int(Component.Mine)])
  return this.matchMine

proc Mouse*(this : MatchObj) : Matcher =
  if this.matchMouse == nil:
    this.matchMouse = MatchAllOf(@[int(Component.Mouse)])
  return this.matchMouse

proc Player*(this : MatchObj) : Matcher =
  if this.matchPlayer == nil:
    this.matchPlayer = MatchAllOf(@[int(Component.Player)])
  return this.matchPlayer

proc Position*(this : MatchObj) : Matcher =
  if this.matchPosition == nil:
    this.matchPosition = MatchAllOf(@[int(Component.Position)])
  return this.matchPosition

proc Resource*(this : MatchObj) : Matcher =
  if this.matchResource == nil:
    this.matchResource = MatchAllOf(@[int(Component.Resource)])
  return this.matchResource

proc ScaleAnimation*(this : MatchObj) : Matcher =
  if this.matchScaleAnimation == nil:
    this.matchScaleAnimation = MatchAllOf(@[int(Component.ScaleAnimation)])
  return this.matchScaleAnimation

proc Scale*(this : MatchObj) : Matcher =
  if this.matchScale == nil:
    this.matchScale = MatchAllOf(@[int(Component.Scale)])
  return this.matchScale

proc Score*(this : MatchObj) : Matcher =
  if this.matchScore == nil:
    this.matchScore = MatchAllOf(@[int(Component.Score)])
  return this.matchScore

proc SoundEffect*(this : MatchObj) : Matcher =
  if this.matchSoundEffect == nil:
    this.matchSoundEffect = MatchAllOf(@[int(Component.SoundEffect)])
  return this.matchSoundEffect

proc Velocity*(this : MatchObj) : Matcher =
  if this.matchVelocity == nil:
    this.matchVelocity = MatchAllOf(@[int(Component.Velocity)])
  return this.matchVelocity

var Match* = MatchObj()

##
## Extend Entity
##


proc clearBoundsComponent*(this : Entity) =
  Pool.boundsComponent = initDeque[BoundsComponent]()

## @type {shmupwarz.BoundsComponent} 
proc bounds*(this : Entity) : BoundsComponent =
  (BoundsComponent)this.getComponent(int(Component.Bounds))

## @type {boolean} 
proc hasBounds*(this : Entity) : bool =
  this.hasComponent(int(Component.Bounds))

##
## @param {float64} radius
## @returns {bosco.Entity}
##
proc addBounds*(this : Entity, radius:float64) : Entity =
  var component = if Pool.boundsComponent.len > 0 : Pool.boundsComponent.popFirst() else: BoundsComponent()
  component.radius = radius
  discard this.addComponent(int(Component.Bounds), component)
  return this

##
## @param {float64} radius
## @returns {bosco.Entity}
##
proc replaceBounds*(this : Entity, radius:float64) : Entity =
  var previousComponent = if this.hasBounds : this.bounds else: nil
  var component = if Pool.boundsComponent.len > 0 : Pool.boundsComponent.popFirst() else: BoundsComponent()
  component.radius = radius
  discard this.replaceComponent(int(Component.Bounds), component)
  if previousComponent != nil:
    Pool.boundsComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeBounds*(this : Entity) : Entity =
  var component = this.bounds
  discard this.removeComponent(int(Component.Bounds))
  Pool.boundsComponent.addFirst(component)
  return this

## @type {boolean} 
proc isBullet*(this : Entity) : bool =
  this.hasComponent(int(Component.Bullet))
proc `isBullet=`*(this : Entity, value : bool) =
  if value != this.isBullet:
    if value:
      discard this.addComponent(int(Component.Bullet), Pool.bulletComponent)
    else:
      discard this.removeComponent(int(Component.Bullet))

##
## @param {boolean} value
## @returns {bosco.Entity}
##
proc setBullet*(this : Entity, value : bool) : Entity =
  this.isBullet = value
  return this


proc clearColorAnimationComponent*(this : Entity) =
  Pool.colorAnimationComponent = initDeque[ColorAnimationComponent]()

## @type {shmupwarz.ColorAnimationComponent} 
proc colorAnimation*(this : Entity) : ColorAnimationComponent =
  (ColorAnimationComponent)this.getComponent(int(Component.ColorAnimation))

## @type {boolean} 
proc hasColorAnimation*(this : Entity) : bool =
  this.hasComponent(int(Component.ColorAnimation))

##
## @param {float64} redMin
## @param {float64} redMax
## @param {float64} redSpeed
## @param {float64} greenMin
## @param {float64} greenMax
## @param {float64} greenSpeed
## @param {float64} blueMin
## @param {float64} blueMax
## @param {float64} blueSpeed
## @param {float64} alphaMin
## @param {float64} alphaMax
## @param {float64} alphaSpeed
## @param {bool} redAnimate
## @param {bool} greenAnimate
## @param {bool} blueAnimate
## @param {bool} alphaAnimate
## @param {bool} repeat
## @returns {bosco.Entity}
##
proc addColorAnimation*(this : Entity, redMin:float64, redMax:float64, redSpeed:float64, greenMin:float64, greenMax:float64, greenSpeed:float64, blueMin:float64, blueMax:float64, blueSpeed:float64, alphaMin:float64, alphaMax:float64, alphaSpeed:float64, redAnimate:bool, greenAnimate:bool, blueAnimate:bool, alphaAnimate:bool, repeat:bool) : Entity =
  var component = if Pool.colorAnimationComponent.len > 0 : Pool.colorAnimationComponent.popFirst() else: ColorAnimationComponent()
  component.redMin = redMin
  component.redMax = redMax
  component.redSpeed = redSpeed
  component.greenMin = greenMin
  component.greenMax = greenMax
  component.greenSpeed = greenSpeed
  component.blueMin = blueMin
  component.blueMax = blueMax
  component.blueSpeed = blueSpeed
  component.alphaMin = alphaMin
  component.alphaMax = alphaMax
  component.alphaSpeed = alphaSpeed
  component.redAnimate = redAnimate
  component.greenAnimate = greenAnimate
  component.blueAnimate = blueAnimate
  component.alphaAnimate = alphaAnimate
  component.repeat = repeat
  discard this.addComponent(int(Component.ColorAnimation), component)
  return this

##
## @param {float64} redMin
## @param {float64} redMax
## @param {float64} redSpeed
## @param {float64} greenMin
## @param {float64} greenMax
## @param {float64} greenSpeed
## @param {float64} blueMin
## @param {float64} blueMax
## @param {float64} blueSpeed
## @param {float64} alphaMin
## @param {float64} alphaMax
## @param {float64} alphaSpeed
## @param {bool} redAnimate
## @param {bool} greenAnimate
## @param {bool} blueAnimate
## @param {bool} alphaAnimate
## @param {bool} repeat
## @returns {bosco.Entity}
##
proc replaceColorAnimation*(this : Entity, redMin:float64, redMax:float64, redSpeed:float64, greenMin:float64, greenMax:float64, greenSpeed:float64, blueMin:float64, blueMax:float64, blueSpeed:float64, alphaMin:float64, alphaMax:float64, alphaSpeed:float64, redAnimate:bool, greenAnimate:bool, blueAnimate:bool, alphaAnimate:bool, repeat:bool) : Entity =
  var previousComponent = if this.hasColorAnimation : this.colorAnimation else: nil
  var component = if Pool.colorAnimationComponent.len > 0 : Pool.colorAnimationComponent.popFirst() else: ColorAnimationComponent()
  component.redMin = redMin
  component.redMax = redMax
  component.redSpeed = redSpeed
  component.greenMin = greenMin
  component.greenMax = greenMax
  component.greenSpeed = greenSpeed
  component.blueMin = blueMin
  component.blueMax = blueMax
  component.blueSpeed = blueSpeed
  component.alphaMin = alphaMin
  component.alphaMax = alphaMax
  component.alphaSpeed = alphaSpeed
  component.redAnimate = redAnimate
  component.greenAnimate = greenAnimate
  component.blueAnimate = blueAnimate
  component.alphaAnimate = alphaAnimate
  component.repeat = repeat
  discard this.replaceComponent(int(Component.ColorAnimation), component)
  if previousComponent != nil:
    Pool.colorAnimationComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeColorAnimation*(this : Entity) : Entity =
  var component = this.colorAnimation
  discard this.removeComponent(int(Component.ColorAnimation))
  Pool.colorAnimationComponent.addFirst(component)
  return this

## @type {boolean} 
proc isDestroy*(this : Entity) : bool =
  this.hasComponent(int(Component.Destroy))
proc `isDestroy=`*(this : Entity, value : bool) =
  if value != this.isDestroy:
    if value:
      discard this.addComponent(int(Component.Destroy), Pool.destroyComponent)
    else:
      discard this.removeComponent(int(Component.Destroy))

##
## @param {boolean} value
## @returns {bosco.Entity}
##
proc setDestroy*(this : Entity, value : bool) : Entity =
  this.isDestroy = value
  return this

## @type {boolean} 
proc isEnemy*(this : Entity) : bool =
  this.hasComponent(int(Component.Enemy))
proc `isEnemy=`*(this : Entity, value : bool) =
  if value != this.isEnemy:
    if value:
      discard this.addComponent(int(Component.Enemy), Pool.enemyComponent)
    else:
      discard this.removeComponent(int(Component.Enemy))

##
## @param {boolean} value
## @returns {bosco.Entity}
##
proc setEnemy*(this : Entity, value : bool) : Entity =
  this.isEnemy = value
  return this


proc clearExpiresComponent*(this : Entity) =
  Pool.expiresComponent = initDeque[ExpiresComponent]()

## @type {shmupwarz.ExpiresComponent} 
proc expires*(this : Entity) : ExpiresComponent =
  (ExpiresComponent)this.getComponent(int(Component.Expires))

## @type {boolean} 
proc hasExpires*(this : Entity) : bool =
  this.hasComponent(int(Component.Expires))

##
## @param {float64} delay
## @returns {bosco.Entity}
##
proc addExpires*(this : Entity, delay:float64) : Entity =
  var component = if Pool.expiresComponent.len > 0 : Pool.expiresComponent.popFirst() else: ExpiresComponent()
  component.delay = delay
  discard this.addComponent(int(Component.Expires), component)
  return this

##
## @param {float64} delay
## @returns {bosco.Entity}
##
proc replaceExpires*(this : Entity, delay:float64) : Entity =
  var previousComponent = if this.hasExpires : this.expires else: nil
  var component = if Pool.expiresComponent.len > 0 : Pool.expiresComponent.popFirst() else: ExpiresComponent()
  component.delay = delay
  discard this.replaceComponent(int(Component.Expires), component)
  if previousComponent != nil:
    Pool.expiresComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeExpires*(this : Entity) : Entity =
  var component = this.expires
  discard this.removeComponent(int(Component.Expires))
  Pool.expiresComponent.addFirst(component)
  return this

## @type {boolean} 
proc isFiring*(this : Entity) : bool =
  this.hasComponent(int(Component.Firing))
proc `isFiring=`*(this : Entity, value : bool) =
  if value != this.isFiring:
    if value:
      discard this.addComponent(int(Component.Firing), Pool.firingComponent)
    else:
      discard this.removeComponent(int(Component.Firing))

##
## @param {boolean} value
## @returns {bosco.Entity}
##
proc setFiring*(this : Entity, value : bool) : Entity =
  this.isFiring = value
  return this


proc clearHealthComponent*(this : Entity) =
  Pool.healthComponent = initDeque[HealthComponent]()

## @type {shmupwarz.HealthComponent} 
proc health*(this : Entity) : HealthComponent =
  (HealthComponent)this.getComponent(int(Component.Health))

## @type {boolean} 
proc hasHealth*(this : Entity) : bool =
  this.hasComponent(int(Component.Health))

##
## @param {float64} health
## @param {float64} maximumHealth
## @returns {bosco.Entity}
##
proc addHealth*(this : Entity, health:float64, maximumHealth:float64) : Entity =
  var component = if Pool.healthComponent.len > 0 : Pool.healthComponent.popFirst() else: HealthComponent()
  component.health = health
  component.maximumHealth = maximumHealth
  discard this.addComponent(int(Component.Health), component)
  return this

##
## @param {float64} health
## @param {float64} maximumHealth
## @returns {bosco.Entity}
##
proc replaceHealth*(this : Entity, health:float64, maximumHealth:float64) : Entity =
  var previousComponent = if this.hasHealth : this.health else: nil
  var component = if Pool.healthComponent.len > 0 : Pool.healthComponent.popFirst() else: HealthComponent()
  component.health = health
  component.maximumHealth = maximumHealth
  discard this.replaceComponent(int(Component.Health), component)
  if previousComponent != nil:
    Pool.healthComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeHealth*(this : Entity) : Entity =
  var component = this.health
  discard this.removeComponent(int(Component.Health))
  Pool.healthComponent.addFirst(component)
  return this


proc clearLayerComponent*(this : Entity) =
  Pool.layerComponent = initDeque[LayerComponent]()

## @type {shmupwarz.LayerComponent} 
proc layer*(this : Entity) : LayerComponent =
  (LayerComponent)this.getComponent(int(Component.Layer))

## @type {boolean} 
proc hasLayer*(this : Entity) : bool =
  this.hasComponent(int(Component.Layer))

##
## @param {int} ordinal
## @returns {bosco.Entity}
##
proc addLayer*(this : Entity, ordinal:int) : Entity =
  var component = if Pool.layerComponent.len > 0 : Pool.layerComponent.popFirst() else: LayerComponent()
  component.ordinal = ordinal
  discard this.addComponent(int(Component.Layer), component)
  return this

##
## @param {int} ordinal
## @returns {bosco.Entity}
##
proc replaceLayer*(this : Entity, ordinal:int) : Entity =
  var previousComponent = if this.hasLayer : this.layer else: nil
  var component = if Pool.layerComponent.len > 0 : Pool.layerComponent.popFirst() else: LayerComponent()
  component.ordinal = ordinal
  discard this.replaceComponent(int(Component.Layer), component)
  if previousComponent != nil:
    Pool.layerComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeLayer*(this : Entity) : Entity =
  var component = this.layer
  discard this.removeComponent(int(Component.Layer))
  Pool.layerComponent.addFirst(component)
  return this


proc clearLifeComponent*(this : Entity) =
  Pool.lifeComponent = initDeque[LifeComponent]()

## @type {shmupwarz.LifeComponent} 
proc life*(this : Entity) : LifeComponent =
  (LifeComponent)this.getComponent(int(Component.Life))

## @type {boolean} 
proc hasLife*(this : Entity) : bool =
  this.hasComponent(int(Component.Life))

##
## @param {int} count
## @returns {bosco.Entity}
##
proc addLife*(this : Entity, count:int) : Entity =
  var component = if Pool.lifeComponent.len > 0 : Pool.lifeComponent.popFirst() else: LifeComponent()
  component.count = count
  discard this.addComponent(int(Component.Life), component)
  return this

##
## @param {int} count
## @returns {bosco.Entity}
##
proc replaceLife*(this : Entity, count:int) : Entity =
  var previousComponent = if this.hasLife : this.life else: nil
  var component = if Pool.lifeComponent.len > 0 : Pool.lifeComponent.popFirst() else: LifeComponent()
  component.count = count
  discard this.replaceComponent(int(Component.Life), component)
  if previousComponent != nil:
    Pool.lifeComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeLife*(this : Entity) : Entity =
  var component = this.life
  discard this.removeComponent(int(Component.Life))
  Pool.lifeComponent.addFirst(component)
  return this

## @type {boolean} 
proc isMine*(this : Entity) : bool =
  this.hasComponent(int(Component.Mine))
proc `isMine=`*(this : Entity, value : bool) =
  if value != this.isMine:
    if value:
      discard this.addComponent(int(Component.Mine), Pool.mineComponent)
    else:
      discard this.removeComponent(int(Component.Mine))

##
## @param {boolean} value
## @returns {bosco.Entity}
##
proc setMine*(this : Entity, value : bool) : Entity =
  this.isMine = value
  return this


proc clearMouseComponent*(this : Entity) =
  Pool.mouseComponent = initDeque[MouseComponent]()

## @type {shmupwarz.MouseComponent} 
proc mouse*(this : Entity) : MouseComponent =
  (MouseComponent)this.getComponent(int(Component.Mouse))

## @type {boolean} 
proc hasMouse*(this : Entity) : bool =
  this.hasComponent(int(Component.Mouse))

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc addMouse*(this : Entity, x:float64, y:float64) : Entity =
  var component = if Pool.mouseComponent.len > 0 : Pool.mouseComponent.popFirst() else: MouseComponent()
  component.x = x
  component.y = y
  discard this.addComponent(int(Component.Mouse), component)
  return this

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc replaceMouse*(this : Entity, x:float64, y:float64) : Entity =
  var previousComponent = if this.hasMouse : this.mouse else: nil
  var component = if Pool.mouseComponent.len > 0 : Pool.mouseComponent.popFirst() else: MouseComponent()
  component.x = x
  component.y = y
  discard this.replaceComponent(int(Component.Mouse), component)
  if previousComponent != nil:
    Pool.mouseComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeMouse*(this : Entity) : Entity =
  var component = this.mouse
  discard this.removeComponent(int(Component.Mouse))
  Pool.mouseComponent.addFirst(component)
  return this

## @type {boolean} 
proc isPlayer*(this : Entity) : bool =
  this.hasComponent(int(Component.Player))
proc `isPlayer=`*(this : Entity, value : bool) =
  if value != this.isPlayer:
    if value:
      discard this.addComponent(int(Component.Player), Pool.playerComponent)
    else:
      discard this.removeComponent(int(Component.Player))

##
## @param {boolean} value
## @returns {bosco.Entity}
##
proc setPlayer*(this : Entity, value : bool) : Entity =
  this.isPlayer = value
  return this


proc clearPositionComponent*(this : Entity) =
  Pool.positionComponent = initDeque[PositionComponent]()

## @type {shmupwarz.PositionComponent} 
proc position*(this : Entity) : PositionComponent =
  (PositionComponent)this.getComponent(int(Component.Position))

## @type {boolean} 
proc hasPosition*(this : Entity) : bool =
  this.hasComponent(int(Component.Position))

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc addPosition*(this : Entity, x:float64, y:float64) : Entity =
  var component = if Pool.positionComponent.len > 0 : Pool.positionComponent.popFirst() else: PositionComponent()
  component.x = x
  component.y = y
  discard this.addComponent(int(Component.Position), component)
  return this

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc replacePosition*(this : Entity, x:float64, y:float64) : Entity =
  var previousComponent = if this.hasPosition : this.position else: nil
  var component = if Pool.positionComponent.len > 0 : Pool.positionComponent.popFirst() else: PositionComponent()
  component.x = x
  component.y = y
  discard this.replaceComponent(int(Component.Position), component)
  if previousComponent != nil:
    Pool.positionComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removePosition*(this : Entity) : Entity =
  var component = this.position
  discard this.removeComponent(int(Component.Position))
  Pool.positionComponent.addFirst(component)
  return this


proc clearResourceComponent*(this : Entity) =
  Pool.resourceComponent = initDeque[ResourceComponent]()

## @type {shmupwarz.ResourceComponent} 
proc resource*(this : Entity) : ResourceComponent =
  (ResourceComponent)this.getComponent(int(Component.Resource))

## @type {boolean} 
proc hasResource*(this : Entity) : bool =
  this.hasComponent(int(Component.Resource))

##
## @param {string} path
## @param {Sprite} sprite
## @param {bool} centered
## @returns {bosco.Entity}
##
proc addResource*(this : Entity, path:string, sprite:Sprite, centered:bool) : Entity =
  var component = if Pool.resourceComponent.len > 0 : Pool.resourceComponent.popFirst() else: ResourceComponent()
  component.path = path
  component.sprite = sprite
  component.centered = centered
  discard this.addComponent(int(Component.Resource), component)
  return this

##
## @param {string} path
## @param {Sprite} sprite
## @param {bool} centered
## @returns {bosco.Entity}
##
proc replaceResource*(this : Entity, path:string, sprite:Sprite, centered:bool) : Entity =
  var previousComponent = if this.hasResource : this.resource else: nil
  var component = if Pool.resourceComponent.len > 0 : Pool.resourceComponent.popFirst() else: ResourceComponent()
  component.path = path
  component.sprite = sprite
  component.centered = centered
  discard this.replaceComponent(int(Component.Resource), component)
  if previousComponent != nil:
    Pool.resourceComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeResource*(this : Entity) : Entity =
  var component = this.resource
  discard this.removeComponent(int(Component.Resource))
  Pool.resourceComponent.addFirst(component)
  return this


proc clearScaleAnimationComponent*(this : Entity) =
  Pool.scaleAnimationComponent = initDeque[ScaleAnimationComponent]()

## @type {shmupwarz.ScaleAnimationComponent} 
proc scaleAnimation*(this : Entity) : ScaleAnimationComponent =
  (ScaleAnimationComponent)this.getComponent(int(Component.ScaleAnimation))

## @type {boolean} 
proc hasScaleAnimation*(this : Entity) : bool =
  this.hasComponent(int(Component.ScaleAnimation))

##
## @param {float64} min
## @param {float64} max
## @param {float64} speed
## @param {bool} repeat
## @param {bool} active
## @returns {bosco.Entity}
##
proc addScaleAnimation*(this : Entity, min:float64, max:float64, speed:float64, repeat:bool, active:bool) : Entity =
  var component = if Pool.scaleAnimationComponent.len > 0 : Pool.scaleAnimationComponent.popFirst() else: ScaleAnimationComponent()
  component.min = min
  component.max = max
  component.speed = speed
  component.repeat = repeat
  component.active = active
  discard this.addComponent(int(Component.ScaleAnimation), component)
  return this

##
## @param {float64} min
## @param {float64} max
## @param {float64} speed
## @param {bool} repeat
## @param {bool} active
## @returns {bosco.Entity}
##
proc replaceScaleAnimation*(this : Entity, min:float64, max:float64, speed:float64, repeat:bool, active:bool) : Entity =
  var previousComponent = if this.hasScaleAnimation : this.scaleAnimation else: nil
  var component = if Pool.scaleAnimationComponent.len > 0 : Pool.scaleAnimationComponent.popFirst() else: ScaleAnimationComponent()
  component.min = min
  component.max = max
  component.speed = speed
  component.repeat = repeat
  component.active = active
  discard this.replaceComponent(int(Component.ScaleAnimation), component)
  if previousComponent != nil:
    Pool.scaleAnimationComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeScaleAnimation*(this : Entity) : Entity =
  var component = this.scaleAnimation
  discard this.removeComponent(int(Component.ScaleAnimation))
  Pool.scaleAnimationComponent.addFirst(component)
  return this


proc clearScaleComponent*(this : Entity) =
  Pool.scaleComponent = initDeque[ScaleComponent]()

## @type {shmupwarz.ScaleComponent} 
proc scale*(this : Entity) : ScaleComponent =
  (ScaleComponent)this.getComponent(int(Component.Scale))

## @type {boolean} 
proc hasScale*(this : Entity) : bool =
  this.hasComponent(int(Component.Scale))

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc addScale*(this : Entity, x:float64, y:float64) : Entity =
  var component = if Pool.scaleComponent.len > 0 : Pool.scaleComponent.popFirst() else: ScaleComponent()
  component.x = x
  component.y = y
  discard this.addComponent(int(Component.Scale), component)
  return this

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc replaceScale*(this : Entity, x:float64, y:float64) : Entity =
  var previousComponent = if this.hasScale : this.scale else: nil
  var component = if Pool.scaleComponent.len > 0 : Pool.scaleComponent.popFirst() else: ScaleComponent()
  component.x = x
  component.y = y
  discard this.replaceComponent(int(Component.Scale), component)
  if previousComponent != nil:
    Pool.scaleComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeScale*(this : Entity) : Entity =
  var component = this.scale
  discard this.removeComponent(int(Component.Scale))
  Pool.scaleComponent.addFirst(component)
  return this


proc clearScoreComponent*(this : Entity) =
  Pool.scoreComponent = initDeque[ScoreComponent]()

## @type {shmupwarz.ScoreComponent} 
proc score*(this : Entity) : ScoreComponent =
  (ScoreComponent)this.getComponent(int(Component.Score))

## @type {boolean} 
proc hasScore*(this : Entity) : bool =
  this.hasComponent(int(Component.Score))

##
## @param {float64} value
## @returns {bosco.Entity}
##
proc addScore*(this : Entity, value:float64) : Entity =
  var component = if Pool.scoreComponent.len > 0 : Pool.scoreComponent.popFirst() else: ScoreComponent()
  component.value = value
  discard this.addComponent(int(Component.Score), component)
  return this

##
## @param {float64} value
## @returns {bosco.Entity}
##
proc replaceScore*(this : Entity, value:float64) : Entity =
  var previousComponent = if this.hasScore : this.score else: nil
  var component = if Pool.scoreComponent.len > 0 : Pool.scoreComponent.popFirst() else: ScoreComponent()
  component.value = value
  discard this.replaceComponent(int(Component.Score), component)
  if previousComponent != nil:
    Pool.scoreComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeScore*(this : Entity) : Entity =
  var component = this.score
  discard this.removeComponent(int(Component.Score))
  Pool.scoreComponent.addFirst(component)
  return this


proc clearSoundEffectComponent*(this : Entity) =
  Pool.soundEffectComponent = initDeque[SoundEffectComponent]()

## @type {shmupwarz.SoundEffectComponent} 
proc soundEffect*(this : Entity) : SoundEffectComponent =
  (SoundEffectComponent)this.getComponent(int(Component.SoundEffect))

## @type {boolean} 
proc hasSoundEffect*(this : Entity) : bool =
  this.hasComponent(int(Component.SoundEffect))

##
## @param {int} effect
## @returns {bosco.Entity}
##
proc addSoundEffect*(this : Entity, effect:int) : Entity =
  var component = if Pool.soundEffectComponent.len > 0 : Pool.soundEffectComponent.popFirst() else: SoundEffectComponent()
  component.effect = effect
  discard this.addComponent(int(Component.SoundEffect), component)
  return this

##
## @param {int} effect
## @returns {bosco.Entity}
##
proc replaceSoundEffect*(this : Entity, effect:int) : Entity =
  var previousComponent = if this.hasSoundEffect : this.soundEffect else: nil
  var component = if Pool.soundEffectComponent.len > 0 : Pool.soundEffectComponent.popFirst() else: SoundEffectComponent()
  component.effect = effect
  discard this.replaceComponent(int(Component.SoundEffect), component)
  if previousComponent != nil:
    Pool.soundEffectComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeSoundEffect*(this : Entity) : Entity =
  var component = this.soundEffect
  discard this.removeComponent(int(Component.SoundEffect))
  Pool.soundEffectComponent.addFirst(component)
  return this


proc clearVelocityComponent*(this : Entity) =
  Pool.velocityComponent = initDeque[VelocityComponent]()

## @type {shmupwarz.VelocityComponent} 
proc velocity*(this : Entity) : VelocityComponent =
  (VelocityComponent)this.getComponent(int(Component.Velocity))

## @type {boolean} 
proc hasVelocity*(this : Entity) : bool =
  this.hasComponent(int(Component.Velocity))

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc addVelocity*(this : Entity, x:float64, y:float64) : Entity =
  var component = if Pool.velocityComponent.len > 0 : Pool.velocityComponent.popFirst() else: VelocityComponent()
  component.x = x
  component.y = y
  discard this.addComponent(int(Component.Velocity), component)
  return this

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc replaceVelocity*(this : Entity, x:float64, y:float64) : Entity =
  var previousComponent = if this.hasVelocity : this.velocity else: nil
  var component = if Pool.velocityComponent.len > 0 : Pool.velocityComponent.popFirst() else: VelocityComponent()
  component.x = x
  component.y = y
  discard this.replaceComponent(int(Component.Velocity), component)
  if previousComponent != nil:
    Pool.velocityComponent.addFirst(previousComponent)

  return this

##
## @returns {bosco.Entity}
##
proc removeVelocity*(this : Entity) : Entity =
  var component = this.velocity
  discard this.removeComponent(int(Component.Velocity))
  Pool.velocityComponent.addFirst(component)
  return this


##
## Extend World
##
## @type {bosco.Entity} 
proc scoreEntity*(this : World) : Entity =
  return this.getGroup(Match.Score).getSingleEntity()

## @type {shmupwarz.ScoreComponent} 
proc score*(this : World) : ScoreComponent =
  return this.scoreEntity.score

## @type {boolean} 
proc hasScore*(this : World) : bool =
  return this.scoreEntity != nil

##
## @param {float64} value
## @returns {bosco.Entity}
##
proc setScore*(this : World, value:float64) : Entity =
  if this.hasScore:
    raise newException(OSError, "SingleEntityException Matching Score")

  var entity = this.createEntity("Score")
  discard entity.addScore(value)
  return entity

##
## @param {float64} value
## @returns {bosco.Entity}
##
proc replaceScore*(this : World, value:float64) : Entity =
  var entity = this.scoreEntity
  if entity == nil:
    entity = this.setScore(value)
  else:
     discard entity.replaceScore(value)
  return entity

##
## @returns {bosco.Entity}
##
proc removeScore*(this : World) =
  this.destroyEntity(this.scoreEntity)

## @type {bosco.Entity} 
proc mouseEntity*(this : World) : Entity =
  return this.getGroup(Match.Mouse).getSingleEntity()

## @type {shmupwarz.MouseComponent} 
proc mouse*(this : World) : MouseComponent =
  return this.mouseEntity.mouse

## @type {boolean} 
proc hasMouse*(this : World) : bool =
  return this.mouseEntity != nil

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc setMouse*(this : World, x:float64, y:float64) : Entity =
  if this.hasMouse:
    raise newException(OSError, "SingleEntityException Matching Mouse")

  var entity = this.createEntity("Mouse")
  discard entity.addMouse(x, y)
  return entity

##
## @param {float64} x
## @param {float64} y
## @returns {bosco.Entity}
##
proc replaceMouse*(this : World, x:float64, y:float64) : Entity =
  var entity = this.mouseEntity
  if entity == nil:
    entity = this.setMouse(x, y)
  else:
     discard entity.replaceMouse(x, y)
  return entity

##
## @returns {bosco.Entity}
##
proc removeMouse*(this : World) =
  this.destroyEntity(this.mouseEntity)

## @type {bosco.Match} 
proc firingEntity*(this : World) : Entity =
  return this.getGroup(Match.Firing).getSingleEntity()

## @type {boolean} 
proc isFiring*(this : World) : bool =
  return this.firingEntity != nil
proc `isFiring=`*(this : World, value : bool) =
  var entity = this.firingEntity
  if value != (entity != nil):
    if value:
      this.createEntity("Firing").isFiring = true
    else:
      this.destroyEntity(entity)


